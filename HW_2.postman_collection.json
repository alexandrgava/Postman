{
	"info": {
		"_postman_id": "9a499627-42e4-4de1-92fc-0ca783c7108c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"body is correct\", function () {pm.response.to.have.body(\"This is the first responce from server!\")})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name = alex\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"alex\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"age = 53\", function () {\r",
							"   pm.expect(+jsonData.age).to.eql(53);\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary = 1000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"var reqData  = request.data\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name = alex\", function () {\r",
							"    pm.expect(reqData.name).to.eql(jsonData.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age=53\", function () {\r",
							"    pm.expect(reqData.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary=1000\", function () {\r",
							"    pm.expect(+reqData.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary*4=4000\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "53",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json ();\r",
							"//4. Спарсить request.\r",
							"var reqBody = pm.request.toJSON().url.query;\r",
							"var reqBody = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name= name\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age=age\", function () {\r",
							"     pm.expect(jsonData.age).to.eql(+reqBody.age);});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log('salary_request=',reqBody.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary_response=\",jsonData.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('salary_response[0]=',jsonData.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary_response[1]=',jsonData.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('salary_response[2]=',jsonData.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_rq=salary_rs\",()=>{\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqBody.salary)\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_rq*2=salary_rs[1]\",()=>{\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqBody.salary*2)\r",
							"});\r",
							"console.log(\"jsonData.salary1=\",jsonData.salary[1], typeof(jsonData.salary[1]));\r",
							"console.log('reqBody.salary=',reqBody.salary,typeof(reqBody.salary));\r",
							"console.log('reqBody.salary*2=',reqBody.salary*2,typeof(reqBody.salary*2));\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_rq*3=sarary_rs*3\",()=>{\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqBody.salary*3)\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"\r",
							"pm.environment.get(\"name\");\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.get(\"age\");\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.get(\"salary\");\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", reqBody.name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqBody.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", reqBody.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							" var SALARY = jsonData.salary; \r",
							"for (var key in SALARY){ \r",
							"    console.log(\"salary= \",SALARY[key]); \r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=alex&age=53&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "alex"
						},
						{
							"key": "age",
							"value": "53"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Вставить параметр salary из окружения в request\r",
							"2. Вставить параметр age из окружения в age\r",
							"3. Вставить параметр name из окружения в name\r",
							"4. Отправить запрос.\r",
							"5. Статус код 200\r",
							"6. Спарсить response body в json.\r",
							"7. Спарсить request.\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"var reqData = request.data;\r",
							"console.log(jsonData)\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response has start_qa_salary  \",() => {\r",
							"pm.expect(jsonData ).to.property(\"start_qa_salary\")});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							" pm.test(\"response has qa_salary_after_6_months \",() => {\r",
							"pm.expect(jsonData). to.property(\"qa_salary_after_6_months\")});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response has qa_salary_after_12_months \",() => {\r",
							"pm.expect(jsonData). to.property(\"qa_salary_after_12_months\")});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response has qa_salary_after_1.5_year \",() => {\r",
							"pm.expect(jsonData). to.property(\"qa_salary_after_1.5_year\")});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response has qa_salary_after_3.5_years \",() => {\r",
							"pm.expect(jsonData). to.property(\"qa_salary_after_3.5_years\")});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"response has person \",() => {\r",
							"pm.expect(jsonData). to.property(\"person\")});\r",
							"//14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary=\", ()=> {\r",
							"    pm.expect(+reqData.salary).to.eql(jsonData.start_qa_salary)\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months=\", ()=> {\r",
							"    pm.expect(+reqData.salary * 2).to.eql(jsonData.qa_salary_after_6_months)\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months=\", ()=> {\r",
							"    pm.expect(+reqData.salary * 2.7).to.eql(jsonData.qa_salary_after_12_months)\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year=\", ()=> {\r",
							"    pm.expect(+reqData.salary * 3.3).to.eql(jsonData['qa_salary_after_1.5_year'])\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_3.5_year=\", ()=> {\r",
							"    pm.expect(+reqData.salary * 3.8).to.eql(jsonData['qa_salary_after_3.5_years'])\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1]=\", ()=> {\r",
							"pm.expect(+reqData.salary).to.eql(jsonData.person.u_name[1])\r",
							" });\r",
							"console.log(jsonData.person.u_name[1])\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age=\", ()=> {\r",
							"    pm.expect(+reqData.age).to.eql(jsonData.person.u_age)\r",
							"});\r",
							"console.log(jsonData.person.u_age)\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years=\", ()=> {\r",
							"    pm.expect(+reqData.salary*4.2).to.eql(jsonData.person.u_salary_5_years)\r",
							"});\r",
							"console.log('&=',jsonData.person.u_salary_5_years, typeof(jsonData.person.u_salary_5_years));\r",
							"console.log(jsonData['qa_salary_after_1.5_year'])\r",
							"\r",
							"\r",
							"/*22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.*/\r",
							"\r",
							"\r",
							"/* let obj = jsonData.person; \r",
							"for (let key in obj){ \r",
							"    console.log(\"person= \",obj[key]);\r",
							"}*/\r",
							" var PERSON = jsonData.salary; \r",
							"for (var key in PERSON){ \r",
							"    console.log(\"salary= \",PERSON[key]); \r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "50",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var reqData = pm.request.toJSON().url.query;\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name=name\",()=> {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name)\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age=age\",()=> {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age)\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary=salary\",()=> {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary)\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog has name\",()=> {\r",
							"    pm.expect(jsonData.family.pets.dog).to.property(\"name\")});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							" pm.test(\"dog has age\",()=> {\r",
							"    pm.expect(jsonData.family.pets.dog).to.property(\"age\")});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dogs name=Luky\",()=> {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dogs age=4\",()=> {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&salary={{salary}}&age={{age}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						}
					]
				}
			},
			"response": []
		}
	]
}